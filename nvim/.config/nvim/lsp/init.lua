-- -- local cmp_nvim_lsp = require("cmp_nvim_lsp")
--
-- local orig_util_open_floating_preview = vim.lsp.util.open_floating_preview
-- --
-- function vim.lsp.util.open_floating_preview(contents, syntax, opts, ...)
--   opts = opts or {}
--   opts.border = opts.border or "rounded"
--   return orig_util_open_floating_preview(contents, syntax, opts, ...)
-- end
--
-- local keymap = vim.keymap
--
-- local opts = { noremap = true, silent = true }
--
-- local on_attach = function(client, bufnr)
--   opts.buffer = bufnr
--
--   -- set keybinds
--   opts.desc = "Show LSP references"
--   keymap.set("n", "gR", "<cmd>Telescope lsp_references<CR>", opts) -- show definition, references
--
--   opts.desc = "Go to declaration"
--   keymap.set("n", "gD", vim.lsp.buf.declaration, opts) -- go to declaration
--
--   opts.desc = "Show LSP definitions"
--   keymap.set("n", "gd", "<cmd>Telescope lsp_definitions<CR>", opts) -- show lsp definitions
--
--   opts.desc = "Show LSP implementations"
--   keymap.set("n", "gi", "<cmd>Telescope lsp_implementations<CR>", opts) -- show lsp implementations
--
--   -- opts.desc = "Show LSP type definitions"
--   -- keymap.set("n", "gt", "<cmd>Telescope lsp_type_definitions<CR>", opts) -- show lsp type definitions
--
--   opts.desc = "See available code actions"
--   keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection
--
--   opts.desc = "Smart rename"
--   keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts) -- smart rename
--
--   opts.desc = "Show buffer diagnostics"
--   keymap.set("n", "<leader>D", "<cmd>Telescope diagnostics bufnr=0<CR>", opts) -- show  diagnostics for file
--
--   opts.desc = "Show line diagnostics"
--   keymap.set("n", "<leader>d", function()
--     vim.diagnostic.open_float({
--       border = "rounded",
--       source = "if_many",
--       format = function(raw)
--         return raw.message
--         -- local result = ""
--         -- for line in string.gmatch(raw.message, "[^\n]+") do
--         -- 	for arg, arg_type, param, param_type in
--         -- 		string.gmatch(line, "([^\n]+)'([^']+)'([^\n]+)'([^']+)'")
--         -- 	do
--         -- 		if arg and arg_type then
--         -- 			result = result .. arg .. "\n```\n" .. parse_ts_type(arg_type) .. "\n```\n"
--         -- 		end
--         -- 		if param and param_type then
--         -- 			result = result .. param .. "\n```\n" .. parse_ts_type(param_type) .. "\n```\n"
--         -- 		end
--         -- 	end
--         -- end
--         -- return result
--       end,
--     })
--   end, opts) -- show diagnostics for line
--
--   opts.desc = "Go to previous diagnostic"
--   keymap.set("n", "[d", vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer
--
--   opts.desc = "Go to next diagnostic"
--   keymap.set("n", "]d", vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer
--
--   opts.desc = "Show documentation for what is under cursor"
--   keymap.set("n", "K", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor
--
--   opts.desc = "Restart LSP"
--   keymap.set("n", "<leader>rs", ":LspRestart<CR>", opts) -- mapping to restart lsp if necessary
-- end
--
-- -- used to enable autocompletion (assign to every lsp server config)
-- local capabilities = {} -- cmp_nvim_lsp.default_capabilities()
--
-- -- vim.lsp.config("tailwind-tools", {
-- -- 	capabilities = capabilities,
-- -- 	filetypes = { "html", "css", "elixir", "typescript" },
-- -- 	on_attach = on_attach,
-- -- })
--
-- vim.lsp.config("gopls", {
--   capabilities = capabilities,
--   on_attach = on_attach,
-- })
--
-- vim.lsp.config("pylsp", {
--   capabilities = capabilities,
--   on_attach = on_attach,
-- })
--
-- vim.lsp.config("csharp_ls", {
--   capabilities = capabilities,
--   on_attach = on_attach,
-- })
--
-- vim.lsp.config("ols", {
--   capabilities = capabilities,
--   on_attach = on_attach,
-- })
--
-- vim.lsp.config("rust_analyzer", {
--   capabilities = capabilities,
--   on_attach = on_attach,
-- })
--
-- -- vim.lsp.config("emmet_ls", {
-- -- 	capabilities = capabilities,
-- -- 	filetypes = { "html", "css", "javascript", "typescript", "vue", "elixir" },
-- -- 	on_attach = on_attach,
-- -- })
--
-- vim.lsp.config("elixirls", {
--   capabilities = capabilities,
--   on_attach = on_attach,
--   cmd = { "elixir-ls" },
-- })
--
-- -- TODO: figure out how to move this dumb logic out
-- local ts_ls = vim.fn.system({ "which", "typescript-language-server" })
-- if string.find(ts_ls, "not found") == nil then
--   local tsserver_filetypes = { "typescript", "javascript", "javascriptreact", "typescriptreact", "vue" }
--
--   local ts_config = {
--     capabilities = capabilities,
--     on_attach = on_attach,
--     filetypes = tsserver_filetypes,
--   }
--   local vue_ls_path = vim.fn.system({ "which", "vue-language-server" })
--   local vtsls_config = {
--     settings = {
--       vtsls = {
--         tsserver = {
--           globalPlugins = {},
--         },
--       },
--     },
--     filetypes = tsserver_filetypes,
--   }
--
--   if string.find(vue_ls_path, "not found") == nil then
--     local vue_plugin_path = vue_ls_path
--         .. "../lib/language-tools/packages/language-server/node_modules/@vue/typescript-plugin"
--     local vue_plugin = {
--       name = "@vue/typescript-plugin",
--       location = vue_plugin_path,
--       languages = { "vue" },
--       configNamespace = "typescript",
--     }
--
--     vtsls_config["settings"]["vtsls"]["tsserver"]["globalPlugins"] = {
--       vue_plugin,
--     }
--
--     ts_config["init_options"] = {
--       plugins = {
--         vue_plugin,
--       },
--     }
--   end
--
--   -- nvim 0.11 or above
--   vim.lsp.config("vtsls", vtsls_config)
--   vim.lsp.config("vue_ls", {})
--   vim.lsp.config("ts_ls", ts_config)
--   vim.lsp.enable({ "vtsls", "vue_ls" })
-- end
